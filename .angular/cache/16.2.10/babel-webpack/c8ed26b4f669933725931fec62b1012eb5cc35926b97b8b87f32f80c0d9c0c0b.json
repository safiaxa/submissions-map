{"ast":null,"code":"import { tileLayer } from 'leaflet';\nvar LeafletTileLayerDefinition = /** @class */function () {\n  function LeafletTileLayerDefinition(type, url, options) {\n    this.type = type;\n    this.url = url;\n    this.options = options;\n  }\n  /**\n   * Creates a TileLayer from the provided definition. This is a convenience function\n   * to help with generating layers from objects.\n   *\n   * @param layerDef The layer to create\n   * @returns {TileLayer} The TileLayer that has been created\n   */\n  LeafletTileLayerDefinition.createTileLayer = function (layerDef) {\n    var layer;\n    switch (layerDef.type) {\n      case 'xyz':\n        layer = tileLayer(layerDef.url, layerDef.options);\n        break;\n      case 'wms':\n      default:\n        layer = tileLayer.wms(layerDef.url, layerDef.options);\n        break;\n    }\n    return layer;\n  };\n  /**\n   * Creates a TileLayer for each key in the incoming map. This is a convenience function\n   * for generating an associative array of layers from an associative array of objects\n   *\n   * @param layerDefs A map of key to tile layer definition\n   * @returns {{[p: string]: TileLayer}} A new map of key to TileLayer\n   */\n  LeafletTileLayerDefinition.createTileLayers = function (layerDefs) {\n    var layers = {};\n    for (var k in layerDefs) {\n      if (layerDefs.hasOwnProperty(k)) {\n        layers[k] = LeafletTileLayerDefinition.createTileLayer(layerDefs[k]);\n      }\n    }\n    return layers;\n  };\n  /**\n   * Create a Tile Layer from the current state of this object\n   *\n   * @returns {TileLayer} A new TileLayer\n   */\n  LeafletTileLayerDefinition.prototype.createTileLayer = function () {\n    return LeafletTileLayerDefinition.createTileLayer(this);\n  };\n  return LeafletTileLayerDefinition;\n}();\nexport { LeafletTileLayerDefinition };","map":{"version":3,"names":["tileLayer","LeafletTileLayerDefinition","type","url","options","createTileLayer","layerDef","layer","wms","createTileLayers","layerDefs","layers","k","hasOwnProperty","prototype"],"sources":["C:/Users/safia/submissions_map/submissions_map/node_modules/@asymmetrik/ngx-leaflet/dist/leaflet/layers/leaflet-tile-layer-definition.model.js"],"sourcesContent":["import { tileLayer } from 'leaflet';\nvar LeafletTileLayerDefinition = /** @class */ (function () {\n    function LeafletTileLayerDefinition(type, url, options) {\n        this.type = type;\n        this.url = url;\n        this.options = options;\n    }\n    /**\n     * Creates a TileLayer from the provided definition. This is a convenience function\n     * to help with generating layers from objects.\n     *\n     * @param layerDef The layer to create\n     * @returns {TileLayer} The TileLayer that has been created\n     */\n    LeafletTileLayerDefinition.createTileLayer = function (layerDef) {\n        var layer;\n        switch (layerDef.type) {\n            case 'xyz':\n                layer = tileLayer(layerDef.url, layerDef.options);\n                break;\n            case 'wms':\n            default:\n                layer = tileLayer.wms(layerDef.url, layerDef.options);\n                break;\n        }\n        return layer;\n    };\n    /**\n     * Creates a TileLayer for each key in the incoming map. This is a convenience function\n     * for generating an associative array of layers from an associative array of objects\n     *\n     * @param layerDefs A map of key to tile layer definition\n     * @returns {{[p: string]: TileLayer}} A new map of key to TileLayer\n     */\n    LeafletTileLayerDefinition.createTileLayers = function (layerDefs) {\n        var layers = {};\n        for (var k in layerDefs) {\n            if (layerDefs.hasOwnProperty(k)) {\n                layers[k] = (LeafletTileLayerDefinition.createTileLayer(layerDefs[k]));\n            }\n        }\n        return layers;\n    };\n    /**\n     * Create a Tile Layer from the current state of this object\n     *\n     * @returns {TileLayer} A new TileLayer\n     */\n    LeafletTileLayerDefinition.prototype.createTileLayer = function () {\n        return LeafletTileLayerDefinition.createTileLayer(this);\n    };\n    return LeafletTileLayerDefinition;\n}());\nexport { LeafletTileLayerDefinition };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,SAAS;AACnC,IAAIC,0BAA0B,GAAG,aAAe,YAAY;EACxD,SAASA,0BAA0BA,CAACC,IAAI,EAAEC,GAAG,EAAEC,OAAO,EAAE;IACpD,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIH,0BAA0B,CAACI,eAAe,GAAG,UAAUC,QAAQ,EAAE;IAC7D,IAAIC,KAAK;IACT,QAAQD,QAAQ,CAACJ,IAAI;MACjB,KAAK,KAAK;QACNK,KAAK,GAAGP,SAAS,CAACM,QAAQ,CAACH,GAAG,EAAEG,QAAQ,CAACF,OAAO,CAAC;QACjD;MACJ,KAAK,KAAK;MACV;QACIG,KAAK,GAAGP,SAAS,CAACQ,GAAG,CAACF,QAAQ,CAACH,GAAG,EAAEG,QAAQ,CAACF,OAAO,CAAC;QACrD;IACR;IACA,OAAOG,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIN,0BAA0B,CAACQ,gBAAgB,GAAG,UAAUC,SAAS,EAAE;IAC/D,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,KAAK,IAAIC,CAAC,IAAIF,SAAS,EAAE;MACrB,IAAIA,SAAS,CAACG,cAAc,CAACD,CAAC,CAAC,EAAE;QAC7BD,MAAM,CAACC,CAAC,CAAC,GAAIX,0BAA0B,CAACI,eAAe,CAACK,SAAS,CAACE,CAAC,CAAC,CAAE;MAC1E;IACJ;IACA,OAAOD,MAAM;EACjB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIV,0BAA0B,CAACa,SAAS,CAACT,eAAe,GAAG,YAAY;IAC/D,OAAOJ,0BAA0B,CAACI,eAAe,CAAC,IAAI,CAAC;EAC3D,CAAC;EACD,OAAOJ,0BAA0B;AACrC,CAAC,CAAC,CAAE;AACJ,SAASA,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}