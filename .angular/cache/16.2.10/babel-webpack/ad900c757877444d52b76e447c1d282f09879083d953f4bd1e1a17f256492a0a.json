{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction MapViewComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\nexport class MapViewComponent {\n  constructor() {\n    this._filteredCards = [];\n  }\n  set filteredCards(value) {\n    // Setter to ensure proper typing\n    this._filteredCards = value;\n    this.updateMap();\n  }\n  ngOnChanges(changes) {\n    // You can remove this method as we are using the setter now\n  }\n  updateMap() {\n    // Clear previous markers\n    if (this.map) {\n      this.map.eachLayer(layer => {\n        if (layer instanceof L.Marker) {\n          this.map.removeLayer(layer);\n        }\n      });\n    }\n    // Create new markers for filtered cards\n    this._filteredCards.forEach(card => {\n      const {\n        latitude,\n        longitude\n      } = card.location;\n      const marker = L.marker([latitude, longitude]).addTo(this.map);\n      // You can customize the marker, add popups, etc. here\n      marker.bindPopup(`<b>${card.title}</b><br>${card.from}`);\n    });\n  }\n  ngAfterViewInit() {\n    // Initialize the map\n    this.map = L.map('leaflet-map');\n    // Check if there are filtered cards\n    if (this._filteredCards.length > 0) {\n      const firstCard = this._filteredCards[0];\n      const {\n        latitude,\n        longitude\n      } = firstCard.location;\n      // Set the view based on the coordinates of the first card\n      this.map.setView([latitude, longitude], 10);\n    } else {\n      // If no filtered cards, set a default view\n      this.map.setView([0, 0], 2);\n    }\n    // Add a tile layer (you can choose other providers)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(this.map);\n  }\n  static #_ = this.ɵfac = function MapViewComponent_Factory(t) {\n    return new (t || MapViewComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapViewComponent,\n    selectors: [[\"app-map-view\"]],\n    inputs: {\n      filteredCards: \"filteredCards\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngFor\", \"ngForOf\"]],\n    template: function MapViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MapViewComponent_div_0_Template, 1, 0, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.filteredCards);\n      }\n    },\n    dependencies: [i1.NgForOf],\n    styles: [\"\\n\\n#leaflet-map[_ngcontent-%COMP%] {\\n    height: 100%;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWFwLXZpZXcvbWFwLXZpZXcuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkI7QUFDM0I7SUFDSSxZQUFZO0VBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBtYXAtdmlldy5jb21wb25lbnQuY3NzICovXHJcbiNsZWFmbGV0LW1hcCB7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgfVxyXG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["L","i0","ɵɵelement","MapViewComponent","constructor","_filteredCards","filteredCards","value","updateMap","ngOnChanges","changes","map","eachLayer","layer","Marker","removeLayer","forEach","card","latitude","longitude","location","marker","addTo","bindPopup","title","from","ngAfterViewInit","length","firstCard","setView","tileLayer","attribution","_","_2","selectors","inputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","MapViewComponent_Template","rf","ctx","ɵɵtemplate","MapViewComponent_div_0_Template","ɵɵproperty"],"sources":["C:\\Users\\safia\\submissions_map\\submissions_map\\src\\app\\map-view\\map-view.component.ts","C:\\Users\\safia\\submissions_map\\submissions_map\\src\\app\\map-view\\map-view.component.html"],"sourcesContent":["import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport * as L from 'leaflet';\n\ninterface Card {\n  title: string;\n  from: string;\n  location: {\n    latitude: number;\n    longitude: number;\n  };\n  // Add other properties as needed\n}\n\n@Component({\n  selector: 'app-map-view',\n  templateUrl: './map-view.component.html',\n  styleUrls: ['./map-view.component.css'],\n})\nexport class MapViewComponent implements OnChanges {\n  private _filteredCards: Card[] = [];\n\n  @Input()\n  set filteredCards(value: Card[]) {\n    // Setter to ensure proper typing\n    this._filteredCards = value;\n    this.updateMap();\n  }\n\n  private map: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // You can remove this method as we are using the setter now\n  }\n\n  private updateMap(): void {\n    // Clear previous markers\n    if (this.map) {\n      this.map.eachLayer((layer: any) => {\n        if (layer instanceof L.Marker) {\n          this.map.removeLayer(layer);\n        }\n      });\n    }\n\n    // Create new markers for filtered cards\n    this._filteredCards.forEach((card) => {\n      const { latitude, longitude } = card.location;\n      const marker = L.marker([latitude, longitude]).addTo(this.map);\n\n      // You can customize the marker, add popups, etc. here\n      marker.bindPopup(`<b>${card.title}</b><br>${card.from}`);\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // Initialize the map\n    this.map = L.map('leaflet-map');\n\n    // Check if there are filtered cards\n    if (this._filteredCards.length > 0) {\n      const firstCard = this._filteredCards[0];\n      const { latitude, longitude } = firstCard.location;\n\n      // Set the view based on the coordinates of the first card\n      this.map.setView([latitude, longitude], 10);\n    } else {\n      // If no filtered cards, set a default view\n      this.map.setView([0, 0], 2);\n    }\n\n    // Add a tile layer (you can choose other providers)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors',\n    }).addTo(this.map);\n  }\n}\n","<!-- map-view.component.html -->\n<div *ngFor=\"let card of filteredCards\">\n    <!-- Your map rendering logic here using card.latitude and card.longitude -->\n  </div>\n"],"mappings":"AACA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;;;ICA5BC,EAAA,CAAAC,SAAA,UAEQ;;;ADeR,OAAM,MAAOC,gBAAgB;EAL7BC,YAAA;IAMU,KAAAC,cAAc,GAAW,EAAE;;EAEnC,IACIC,aAAaA,CAACC,KAAa;IAC7B;IACA,IAAI,CAACF,cAAc,GAAGE,KAAK;IAC3B,IAAI,CAACC,SAAS,EAAE;EAClB;EAIAC,WAAWA,CAACC,OAAsB;IAChC;EAAA;EAGMF,SAASA,CAAA;IACf;IACA,IAAI,IAAI,CAACG,GAAG,EAAE;MACZ,IAAI,CAACA,GAAG,CAACC,SAAS,CAAEC,KAAU,IAAI;QAChC,IAAIA,KAAK,YAAYb,CAAC,CAACc,MAAM,EAAE;UAC7B,IAAI,CAACH,GAAG,CAACI,WAAW,CAACF,KAAK,CAAC;;MAE/B,CAAC,CAAC;;IAGJ;IACA,IAAI,CAACR,cAAc,CAACW,OAAO,CAAEC,IAAI,IAAI;MACnC,MAAM;QAAEC,QAAQ;QAAEC;MAAS,CAAE,GAAGF,IAAI,CAACG,QAAQ;MAC7C,MAAMC,MAAM,GAAGrB,CAAC,CAACqB,MAAM,CAAC,CAACH,QAAQ,EAAEC,SAAS,CAAC,CAAC,CAACG,KAAK,CAAC,IAAI,CAACX,GAAG,CAAC;MAE9D;MACAU,MAAM,CAACE,SAAS,CAAC,MAAMN,IAAI,CAACO,KAAK,WAAWP,IAAI,CAACQ,IAAI,EAAE,CAAC;IAC1D,CAAC,CAAC;EACJ;EAEAC,eAAeA,CAAA;IACb;IACA,IAAI,CAACf,GAAG,GAAGX,CAAC,CAACW,GAAG,CAAC,aAAa,CAAC;IAE/B;IACA,IAAI,IAAI,CAACN,cAAc,CAACsB,MAAM,GAAG,CAAC,EAAE;MAClC,MAAMC,SAAS,GAAG,IAAI,CAACvB,cAAc,CAAC,CAAC,CAAC;MACxC,MAAM;QAAEa,QAAQ;QAAEC;MAAS,CAAE,GAAGS,SAAS,CAACR,QAAQ;MAElD;MACA,IAAI,CAACT,GAAG,CAACkB,OAAO,CAAC,CAACX,QAAQ,EAAEC,SAAS,CAAC,EAAE,EAAE,CAAC;KAC5C,MAAM;MACL;MACA,IAAI,CAACR,GAAG,CAACkB,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;;IAG7B;IACA7B,CAAC,CAAC8B,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;KACd,CAAC,CAACT,KAAK,CAAC,IAAI,CAACX,GAAG,CAAC;EACpB;EAAC,QAAAqB,CAAA,G;qBAxDU7B,gBAAgB;EAAA;EAAA,QAAA8B,EAAA,G;UAAhB9B,gBAAgB;IAAA+B,SAAA;IAAAC,MAAA;MAAA7B,aAAA;IAAA;IAAA8B,QAAA,GAAAnC,EAAA,CAAAoC,oBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCjB7B1C,EAAA,CAAA4C,UAAA,IAAAC,+BAAA,iBAEQ;;;QAFc7C,EAAA,CAAA8C,UAAA,YAAAH,GAAA,CAAAtC,aAAA,CAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}