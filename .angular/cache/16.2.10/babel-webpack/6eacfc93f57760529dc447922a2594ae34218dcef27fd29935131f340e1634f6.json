{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Directive, EventEmitter, Input, KeyValueDiffers, NgZone, Output } from '@angular/core';\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from './leaflet-control-layers.wrapper';\nimport { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';\n/**\n * Layers Control\n *\n * This directive is used to configure the layers control. The input accepts an object with two\n * key-value maps of layer name -> layer. Mutable changes are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the last one it sees will be used.\n */\nvar LeafletLayersControlDirective = /** @class */function () {\n  function LeafletLayersControlDirective(leafletDirective, differs, zone) {\n    this.differs = differs;\n    this.zone = zone;\n    this.layersControlReady = new EventEmitter();\n    this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n    this.controlLayers = new LeafletControlLayersWrapper(this.zone, this.layersControlReady);\n    // Generate differs\n    this.baseLayersDiffer = this.differs.find({}).create();\n    this.overlaysDiffer = this.differs.find({}).create();\n  }\n  Object.defineProperty(LeafletLayersControlDirective.prototype, \"layersControlConfig\", {\n    get: function () {\n      return this.layersControlConfigValue;\n    },\n    set: function (v) {\n      // Validation/init stuff\n      if (null == v) {\n        v = new LeafletControlLayersConfig();\n      }\n      if (null == v.baseLayers) {\n        v.baseLayers = {};\n      }\n      if (null == v.overlays) {\n        v.overlays = {};\n      }\n      // Store the value\n      this.layersControlConfigValue = v;\n      // Update the map\n      this.updateLayers();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  LeafletLayersControlDirective.prototype.ngOnInit = function () {\n    var _this = this;\n    // Init the map\n    this.leafletDirective.init();\n    // Set up control outside of angular to avoid change detection when using the control\n    this.zone.runOutsideAngular(function () {\n      // Set up all the initial settings\n      _this.controlLayers.init({}, _this.layersControlOptions).addTo(_this.leafletDirective.getMap());\n    });\n    this.updateLayers();\n  };\n  LeafletLayersControlDirective.prototype.ngOnDestroy = function () {\n    this.layersControlConfig = {\n      baseLayers: {},\n      overlays: {}\n    };\n    this.controlLayers.getLayersControl().remove();\n  };\n  LeafletLayersControlDirective.prototype.ngDoCheck = function () {\n    this.updateLayers();\n  };\n  LeafletLayersControlDirective.prototype.updateLayers = function () {\n    var map = this.leafletDirective.getMap();\n    var layersControl = this.controlLayers.getLayersControl();\n    if (null != map && null != layersControl) {\n      // Run the baselayers differ\n      if (null != this.baseLayersDiffer && null != this.layersControlConfigValue.baseLayers) {\n        var changes = this.baseLayersDiffer.diff(this.layersControlConfigValue.baseLayers);\n        this.controlLayers.applyBaseLayerChanges(changes);\n      }\n      // Run the overlays differ\n      if (null != this.overlaysDiffer && null != this.layersControlConfigValue.overlays) {\n        var changes = this.overlaysDiffer.diff(this.layersControlConfigValue.overlays);\n        this.controlLayers.applyOverlayChanges(changes);\n      }\n    }\n  };\n  __decorate([Input('leafletLayersControl'), __metadata(\"design:type\", LeafletControlLayersConfig), __metadata(\"design:paramtypes\", [LeafletControlLayersConfig])], LeafletLayersControlDirective.prototype, \"layersControlConfig\", null);\n  __decorate([Input('leafletLayersControlOptions'), __metadata(\"design:type\", Object)], LeafletLayersControlDirective.prototype, \"layersControlOptions\", void 0);\n  __decorate([Output('leafletLayersControlReady'), __metadata(\"design:type\", Object)], LeafletLayersControlDirective.prototype, \"layersControlReady\", void 0);\n  LeafletLayersControlDirective = __decorate([Directive({\n    selector: '[leafletLayersControl]'\n  }), __metadata(\"design:paramtypes\", [LeafletDirective, KeyValueDiffers, NgZone])], LeafletLayersControlDirective);\n  return LeafletLayersControlDirective;\n}();\nexport { LeafletLayersControlDirective };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","Directive","EventEmitter","Input","KeyValueDiffers","NgZone","Output","LeafletDirective","LeafletDirectiveWrapper","LeafletControlLayersWrapper","LeafletControlLayersConfig","LeafletLayersControlDirective","leafletDirective","differs","zone","layersControlReady","controlLayers","baseLayersDiffer","find","create","overlaysDiffer","prototype","get","layersControlConfigValue","set","baseLayers","overlays","updateLayers","enumerable","configurable","ngOnInit","_this","init","runOutsideAngular","layersControlOptions","addTo","getMap","ngOnDestroy","layersControlConfig","getLayersControl","remove","ngDoCheck","map","layersControl","changes","diff","applyBaseLayerChanges","applyOverlayChanges","selector"],"sources":["C:/Users/safia/submissions_map/submissions_map/node_modules/@asymmetrik/ngx-leaflet/dist/leaflet/layers/control/leaflet-control-layers.directive.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Directive, EventEmitter, Input, KeyValueDiffers, NgZone, Output } from '@angular/core';\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from './leaflet-control-layers.wrapper';\nimport { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';\n/**\n * Layers Control\n *\n * This directive is used to configure the layers control. The input accepts an object with two\n * key-value maps of layer name -> layer. Mutable changes are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the last one it sees will be used.\n */\nvar LeafletLayersControlDirective = /** @class */ (function () {\n    function LeafletLayersControlDirective(leafletDirective, differs, zone) {\n        this.differs = differs;\n        this.zone = zone;\n        this.layersControlReady = new EventEmitter();\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n        this.controlLayers = new LeafletControlLayersWrapper(this.zone, this.layersControlReady);\n        // Generate differs\n        this.baseLayersDiffer = this.differs.find({}).create();\n        this.overlaysDiffer = this.differs.find({}).create();\n    }\n    Object.defineProperty(LeafletLayersControlDirective.prototype, \"layersControlConfig\", {\n        get: function () {\n            return this.layersControlConfigValue;\n        },\n        set: function (v) {\n            // Validation/init stuff\n            if (null == v) {\n                v = new LeafletControlLayersConfig();\n            }\n            if (null == v.baseLayers) {\n                v.baseLayers = {};\n            }\n            if (null == v.overlays) {\n                v.overlays = {};\n            }\n            // Store the value\n            this.layersControlConfigValue = v;\n            // Update the map\n            this.updateLayers();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LeafletLayersControlDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        // Init the map\n        this.leafletDirective.init();\n        // Set up control outside of angular to avoid change detection when using the control\n        this.zone.runOutsideAngular(function () {\n            // Set up all the initial settings\n            _this.controlLayers\n                .init({}, _this.layersControlOptions)\n                .addTo(_this.leafletDirective.getMap());\n        });\n        this.updateLayers();\n    };\n    LeafletLayersControlDirective.prototype.ngOnDestroy = function () {\n        this.layersControlConfig = { baseLayers: {}, overlays: {} };\n        this.controlLayers.getLayersControl().remove();\n    };\n    LeafletLayersControlDirective.prototype.ngDoCheck = function () {\n        this.updateLayers();\n    };\n    LeafletLayersControlDirective.prototype.updateLayers = function () {\n        var map = this.leafletDirective.getMap();\n        var layersControl = this.controlLayers.getLayersControl();\n        if (null != map && null != layersControl) {\n            // Run the baselayers differ\n            if (null != this.baseLayersDiffer && null != this.layersControlConfigValue.baseLayers) {\n                var changes = this.baseLayersDiffer.diff(this.layersControlConfigValue.baseLayers);\n                this.controlLayers.applyBaseLayerChanges(changes);\n            }\n            // Run the overlays differ\n            if (null != this.overlaysDiffer && null != this.layersControlConfigValue.overlays) {\n                var changes = this.overlaysDiffer.diff(this.layersControlConfigValue.overlays);\n                this.controlLayers.applyOverlayChanges(changes);\n            }\n        }\n    };\n    __decorate([\n        Input('leafletLayersControl'),\n        __metadata(\"design:type\", LeafletControlLayersConfig),\n        __metadata(\"design:paramtypes\", [LeafletControlLayersConfig])\n    ], LeafletLayersControlDirective.prototype, \"layersControlConfig\", null);\n    __decorate([\n        Input('leafletLayersControlOptions'),\n        __metadata(\"design:type\", Object)\n    ], LeafletLayersControlDirective.prototype, \"layersControlOptions\", void 0);\n    __decorate([\n        Output('leafletLayersControlReady'),\n        __metadata(\"design:type\", Object)\n    ], LeafletLayersControlDirective.prototype, \"layersControlReady\", void 0);\n    LeafletLayersControlDirective = __decorate([\n        Directive({\n            selector: '[leafletLayersControl]'\n        }),\n        __metadata(\"design:paramtypes\", [LeafletDirective, KeyValueDiffers, NgZone])\n    ], LeafletLayersControlDirective);\n    return LeafletLayersControlDirective;\n}());\nexport { LeafletLayersControlDirective };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}