{"ast":null,"code":"import { control } from 'leaflet';\nimport { LeafletControlLayersChanges } from './leaflet-control-layers-changes.model';\nvar LeafletControlLayersWrapper = /** @class */function () {\n  function LeafletControlLayersWrapper(zone, layersControlReady) {\n    this.zone = zone;\n    this.layersControlReady = layersControlReady;\n  }\n  LeafletControlLayersWrapper.prototype.getLayersControl = function () {\n    return this.layersControl;\n  };\n  LeafletControlLayersWrapper.prototype.init = function (controlConfig, controlOptions) {\n    var _this = this;\n    var baseLayers = controlConfig.baseLayers || {};\n    var overlays = controlConfig.overlays || {};\n    // Create the control outside of angular to ensure events don't trigger change detection\n    this.zone.runOutsideAngular(function () {\n      _this.layersControl = control.layers(baseLayers, overlays, controlOptions);\n    });\n    this.layersControlReady.emit(this.layersControl);\n    return this.layersControl;\n  };\n  LeafletControlLayersWrapper.prototype.applyBaseLayerChanges = function (changes) {\n    var results = new LeafletControlLayersChanges();\n    if (null != this.layersControl) {\n      results = this.applyChanges(changes, this.layersControl.addBaseLayer);\n    }\n    return results;\n  };\n  LeafletControlLayersWrapper.prototype.applyOverlayChanges = function (changes) {\n    var results = new LeafletControlLayersChanges();\n    if (null != this.layersControl) {\n      results = this.applyChanges(changes, this.layersControl.addOverlay);\n    }\n    return results;\n  };\n  LeafletControlLayersWrapper.prototype.applyChanges = function (changes, addFn) {\n    var _this = this;\n    var results = new LeafletControlLayersChanges();\n    if (null != changes) {\n      // All layer management is outside angular to avoid layer events from triggering change detection\n      this.zone.runOutsideAngular(function () {\n        changes.forEachChangedItem(function (c) {\n          _this.layersControl.removeLayer(c.previousValue);\n          addFn.call(_this.layersControl, c.currentValue, c.key);\n          results.layersChanged++;\n        });\n        changes.forEachRemovedItem(function (c) {\n          _this.layersControl.removeLayer(c.previousValue);\n          results.layersRemoved++;\n        });\n        changes.forEachAddedItem(function (c) {\n          addFn.call(_this.layersControl, c.currentValue, c.key);\n          results.layersAdded++;\n        });\n      });\n    }\n    return results;\n  };\n  return LeafletControlLayersWrapper;\n}();\nexport { LeafletControlLayersWrapper };","map":{"version":3,"names":["control","LeafletControlLayersChanges","LeafletControlLayersWrapper","zone","layersControlReady","prototype","getLayersControl","layersControl","init","controlConfig","controlOptions","_this","baseLayers","overlays","runOutsideAngular","layers","emit","applyBaseLayerChanges","changes","results","applyChanges","addBaseLayer","applyOverlayChanges","addOverlay","addFn","forEachChangedItem","c","removeLayer","previousValue","call","currentValue","key","layersChanged","forEachRemovedItem","layersRemoved","forEachAddedItem","layersAdded"],"sources":["C:/Users/safia/submissions_map/submissions_map/node_modules/@asymmetrik/ngx-leaflet/dist/leaflet/layers/control/leaflet-control-layers.wrapper.js"],"sourcesContent":["import { control } from 'leaflet';\nimport { LeafletControlLayersChanges } from './leaflet-control-layers-changes.model';\nvar LeafletControlLayersWrapper = /** @class */ (function () {\n    function LeafletControlLayersWrapper(zone, layersControlReady) {\n        this.zone = zone;\n        this.layersControlReady = layersControlReady;\n    }\n    LeafletControlLayersWrapper.prototype.getLayersControl = function () {\n        return this.layersControl;\n    };\n    LeafletControlLayersWrapper.prototype.init = function (controlConfig, controlOptions) {\n        var _this = this;\n        var baseLayers = controlConfig.baseLayers || {};\n        var overlays = controlConfig.overlays || {};\n        // Create the control outside of angular to ensure events don't trigger change detection\n        this.zone.runOutsideAngular(function () {\n            _this.layersControl = control.layers(baseLayers, overlays, controlOptions);\n        });\n        this.layersControlReady.emit(this.layersControl);\n        return this.layersControl;\n    };\n    LeafletControlLayersWrapper.prototype.applyBaseLayerChanges = function (changes) {\n        var results = new LeafletControlLayersChanges();\n        if (null != this.layersControl) {\n            results = this.applyChanges(changes, this.layersControl.addBaseLayer);\n        }\n        return results;\n    };\n    LeafletControlLayersWrapper.prototype.applyOverlayChanges = function (changes) {\n        var results = new LeafletControlLayersChanges();\n        if (null != this.layersControl) {\n            results = this.applyChanges(changes, this.layersControl.addOverlay);\n        }\n        return results;\n    };\n    LeafletControlLayersWrapper.prototype.applyChanges = function (changes, addFn) {\n        var _this = this;\n        var results = new LeafletControlLayersChanges();\n        if (null != changes) {\n            // All layer management is outside angular to avoid layer events from triggering change detection\n            this.zone.runOutsideAngular(function () {\n                changes.forEachChangedItem(function (c) {\n                    _this.layersControl.removeLayer(c.previousValue);\n                    addFn.call(_this.layersControl, c.currentValue, c.key);\n                    results.layersChanged++;\n                });\n                changes.forEachRemovedItem(function (c) {\n                    _this.layersControl.removeLayer(c.previousValue);\n                    results.layersRemoved++;\n                });\n                changes.forEachAddedItem(function (c) {\n                    addFn.call(_this.layersControl, c.currentValue, c.key);\n                    results.layersAdded++;\n                });\n            });\n        }\n        return results;\n    };\n    return LeafletControlLayersWrapper;\n}());\nexport { LeafletControlLayersWrapper };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}