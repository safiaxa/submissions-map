{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nexport class MapViewComponent {\n  constructor() {\n    this.filteredCards = [];\n  }\n  ngOnChanges(changes) {\n    if (changes.filteredCards && changes.filteredCards.currentValue) {\n      this.updateMap();\n    }\n  }\n  updateMap() {\n    // Clear previous markers\n    if (this.map) {\n      this.map.eachLayer(layer => {\n        if (layer instanceof L.Marker) {\n          this.map.removeLayer(layer);\n        }\n      });\n    }\n    // Create new markers for filtered cards\n    this.filteredCards.forEach(card => {\n      const {\n        latitude,\n        longitude\n      } = card.location; // Assuming each card has a 'location' property with 'latitude' and 'longitude'\n      const marker = L.marker([latitude, longitude]).addTo(this.map);\n      // You can customize the marker, add popups, etc. here\n      marker.bindPopup(`<b>${card.title}</b><br>${card.from}`);\n    });\n  }\n  ngAfterViewInit() {\n    // Initialize the map\n    this.map = L.map('leaflet-map').setView([0, 0], 2);\n    // Add a tile layer (you can choose other providers)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(this.map);\n  }\n  static #_ = this.ɵfac = function MapViewComponent_Factory(t) {\n    return new (t || MapViewComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapViewComponent,\n    selectors: [[\"app-map-view\"]],\n    inputs: {\n      filteredCards: \"filteredCards\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    template: function MapViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"map-view works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["L","MapViewComponent","constructor","filteredCards","ngOnChanges","changes","currentValue","updateMap","map","eachLayer","layer","Marker","removeLayer","forEach","card","latitude","longitude","location","marker","addTo","bindPopup","title","from","ngAfterViewInit","setView","tileLayer","attribution","_","_2","selectors","inputs","features","i0","ɵɵNgOnChangesFeature","decls","vars","template","MapViewComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\safia\\submissions_map\\submissions_map\\src\\app\\map-view\\map-view.component.ts","C:\\Users\\safia\\submissions_map\\submissions_map\\src\\app\\map-view\\map-view.component.html"],"sourcesContent":["// map-view.component.ts\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport * as L from 'leaflet';\n\n@Component({\n  selector: 'app-map-view',\n  templateUrl: './map-view.component.html',\n  styleUrls: ['./map-view.component.css'],\n})\nexport class MapViewComponent implements OnChanges {\n  @Input() filteredCards: any[] = [];\n\n  private map: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.filteredCards && changes.filteredCards.currentValue) {\n      this.updateMap();\n    }\n  }\n\n  private updateMap(): void {\n    // Clear previous markers\n    if (this.map) {\n      this.map.eachLayer((layer: any) => {\n        if (layer instanceof L.Marker) {\n          this.map.removeLayer(layer);\n        }\n      });\n    }\n\n    // Create new markers for filtered cards\n    this.filteredCards.forEach((card) => {\n      const { latitude, longitude } = card.location; // Assuming each card has a 'location' property with 'latitude' and 'longitude'\n      const marker = L.marker([latitude, longitude]).addTo(this.map);\n\n      // You can customize the marker, add popups, etc. here\n      marker.bindPopup(`<b>${card.title}</b><br>${card.from}`);\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // Initialize the map\n    this.map = L.map('leaflet-map').setView([0, 0], 2);\n\n    // Add a tile layer (you can choose other providers)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors',\n    }).addTo(this.map);\n  }\n}\n","<p>map-view works!</p>\n"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;AAO5B,OAAM,MAAOC,gBAAgB;EAL7BC,YAAA;IAMW,KAAAC,aAAa,GAAU,EAAE;;EAIlCC,WAAWA,CAACC,OAAsB;IAChC,IAAIA,OAAO,CAACF,aAAa,IAAIE,OAAO,CAACF,aAAa,CAACG,YAAY,EAAE;MAC/D,IAAI,CAACC,SAAS,EAAE;;EAEpB;EAEQA,SAASA,CAAA;IACf;IACA,IAAI,IAAI,CAACC,GAAG,EAAE;MACZ,IAAI,CAACA,GAAG,CAACC,SAAS,CAAEC,KAAU,IAAI;QAChC,IAAIA,KAAK,YAAYV,CAAC,CAACW,MAAM,EAAE;UAC7B,IAAI,CAACH,GAAG,CAACI,WAAW,CAACF,KAAK,CAAC;;MAE/B,CAAC,CAAC;;IAGJ;IACA,IAAI,CAACP,aAAa,CAACU,OAAO,CAAEC,IAAI,IAAI;MAClC,MAAM;QAAEC,QAAQ;QAAEC;MAAS,CAAE,GAAGF,IAAI,CAACG,QAAQ,CAAC,CAAC;MAC/C,MAAMC,MAAM,GAAGlB,CAAC,CAACkB,MAAM,CAAC,CAACH,QAAQ,EAAEC,SAAS,CAAC,CAAC,CAACG,KAAK,CAAC,IAAI,CAACX,GAAG,CAAC;MAE9D;MACAU,MAAM,CAACE,SAAS,CAAC,MAAMN,IAAI,CAACO,KAAK,WAAWP,IAAI,CAACQ,IAAI,EAAE,CAAC;IAC1D,CAAC,CAAC;EACJ;EAEAC,eAAeA,CAAA;IACb;IACA,IAAI,CAACf,GAAG,GAAGR,CAAC,CAACQ,GAAG,CAAC,aAAa,CAAC,CAACgB,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IAElD;IACAxB,CAAC,CAACyB,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;KACd,CAAC,CAACP,KAAK,CAAC,IAAI,CAACX,GAAG,CAAC;EACpB;EAAC,QAAAmB,CAAA,G;qBAvCU1B,gBAAgB;EAAA;EAAA,QAAA2B,EAAA,G;UAAhB3B,gBAAgB;IAAA4B,SAAA;IAAAC,MAAA;MAAA3B,aAAA;IAAA;IAAA4B,QAAA,GAAAC,EAAA,CAAAC,oBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCT7BN,EAAA,CAAAQ,cAAA,QAAG;QAAAR,EAAA,CAAAS,MAAA,sBAAe;QAAAT,EAAA,CAAAU,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}